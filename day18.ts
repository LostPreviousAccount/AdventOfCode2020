// https://www.typescriptlang.org/play

const input = `(8 * 4 + 6 + (7 + 3 * 9 + 4 * 3) + 2 + 2) * 3 * 8 * 2 * 9 * (5 * 5 * 2 * 6)
3 + 4 + 2 * ((6 * 2 + 4 + 5 * 6 * 8) + (3 * 8 * 6 + 8 * 7) + 2 + (7 + 3) * 9 * 5) * 8
(4 + 3 * 8) * (7 * 3 * 8 * 3 + 4) + (8 + 2 + (7 + 4 * 3 * 3)) * (4 * (8 * 6 + 4 + 8 * 5) + 4 + 5 * 7 * (8 + 8 * 4 * 5 * 7)) + (9 * 6 + 8) * (6 + 8 + 5 + 5)
7 + 9 + 3 + ((2 + 6 * 6 * 6 * 5 + 4) * 8 * (9 + 5 + 4) * 7) + 5
((9 + 6 + 2 * 4 + 3 + 9) * (8 * 6 * 9) * 8 * 2 * 7) + 9
7 * 2 + (9 * (7 * 5 + 3 + 9 + 4) + 3 + 7 + 2 * (4 * 8 + 9 + 2 * 8)) + 9 * 7 + 8
9 * 7 + 8 + 3
(9 + (6 + 7 * 2 + 5 + 9) * (2 * 8) * 8 * 5) * 4
(5 * 8 + 6) + 2 * 8 + 2 * ((8 * 8 + 2) + (8 + 2 + 7 + 7) * (5 + 6 + 8 * 4 * 2) * 7) * (6 + 3 + 5 * 6 + 3)
2 + 6 * (7 + 2 + 7 * 9 + (9 + 6 * 5 + 8 + 8) + (4 + 9 * 6))
8 + 5 + 8 * 9 + (4 + 5) + (4 * 9 + 2)
5 + (4 + 3 + 3) * ((6 * 8) * 6 * 3 * 8 + 3 * 8) * 2
(9 + 9 + 3 + (9 * 5 * 8) + 3 + (8 * 2 + 8 + 9)) * 8
(5 * 9 * (7 * 5 * 3 + 3 + 6 * 4)) + 3 * 4 + 3
(9 * 8 + 7) + (3 + 9 * 6 * (8 * 4 + 5 + 8 + 8 * 5) * (2 + 3 + 8)) + (7 * (5 + 8 + 7 * 4 * 7))
(5 * 5 + 2 * 2 * 9 + 6) * 2
(7 * 6 * 3 + 6 + 3 * 6) + 7 + 7 * 8 * (3 + 2 * 5) * 7
3 * 2 + 8 + 2 + ((3 + 2 * 5) + 3 * (3 + 6 + 5 * 3 + 8 * 3)) * (9 + 9)
((8 + 7 * 6) * 4 + 2) + 6 + 2 + 2
8 * (6 * 8 * 8 * 7 * 4 * (6 + 9 * 5 + 6 + 9 + 3)) + 5
(2 * 6 * 7 * 6) + 6 * (6 + 4) * (8 * 7)
9 * 2 + 6 * 2 * (7 + 9 + 9) + 3
7 * 4 + 5 + 7 * (5 * (9 + 7 * 3 + 5 + 3 + 3)) * 4
(3 + 4 * 2 + 4 * (2 * 8 + 4) * (4 + 2 + 6)) * 7 + 7 + 4
8 * 9 + 2 * 4 * (4 + 3) * 4
9 * 7 + (3 + 5 + 7) + 8 * 5 + 4
3 * (3 + 7 * 7 + 7 + (9 * 4 * 2 * 6 * 6)) + 2 + 8
7 + (8 * (9 * 5 + 4 * 6 + 5) + 3 + 3 + (4 * 4 + 7 + 7 * 4 + 7) + 9) + 2 + 2
((4 * 2 * 3 * 8 + 2 + 5) + 9) + (3 + 9) + 8 * 7 * (3 * 2 + 5 * 4 + 4) + 2
7 + 3 * 9 * (2 + 7 * (6 * 2) * 7 * 8 + 7) * 3 * 5
(2 + (9 + 6 + 5 * 5) * 7 * 9) + 3
4 + 2 + (4 * (3 + 8 * 9 + 9 * 2 + 2) * (7 * 4 + 5 + 6 * 4 + 5) + 5) + 8 + 4 + 7
(7 * 6 * 8 * 8 * 8 * 4) * ((5 + 7) + 9) + 2 * 4 + (9 + 7 + 4 + (6 * 7 + 4) * 3 * 5) + 8
(5 + (3 + 3 * 3 + 3 + 4 + 5) + 9) * 5 * 5 + 5 + 7 * (6 + 8 + (8 + 4 * 3 * 7 * 3) * (7 * 7 + 4 * 3) * 7 + 8)
(4 + 4 + 9 * (9 * 2 * 6 * 3 * 8) + 7) * 6 * 3 + 4
(9 + (7 * 4 * 8 * 6 + 5) * 6 + 8 * (6 * 3 * 8 * 6 + 9) * 2) * 5 + 9
(3 + 8 + 7) * 5 + 9 + 7
5 * (4 * 2 + 7 + 2) * 2
(4 + 9 * 2) + (3 + 6 + (2 + 4 * 7)) * 2
3 + 8
8 * (2 + 9 * 2 + 2) + 7 * 6 * (7 + 3 * 7 + 7 * 9 + 4) + 8
6 * ((7 + 9 + 7) + 7 * 6 * (7 * 7) * 7) * 6
4 * (8 * (3 + 9))
2 + (7 * 8 * 8 + (8 + 4 * 8 + 3) * (4 * 8) * 8) * 2
7 * 5 * 6 + 2 * 5 * 7
2 * 2 * (2 * (6 + 3 + 2 * 3 + 3) * 8 * 6) + 4
8 * 2 + 5 + (9 * 7 + 8 * 6 + 2 + 3)
6 + (3 + 2 + 3 + 4 * 9)
(9 + 8 * 2) * 9 + ((2 * 6 + 8 * 7 * 7 * 2) + 5 * 6) + 8 + 7
8 + ((3 + 9) * 5 + 3 * 3 + 8 + 7) * 6 * 3 * 4 * 9
(6 + 5 * 7) + ((2 + 9 + 3 * 2) * (3 + 8 + 9 * 5) + 2 * (3 + 9 + 3) + 2 * (2 + 8 + 9))
8 + 9 + (6 * (2 * 4 * 9) + 5 + 9) + ((8 * 2 * 7 + 9 + 4 + 9) * (5 + 2 + 4 + 4)) + 4
(6 * 9 + 4 * 6 + 7 * (9 + 8)) + 3 + 4 + (6 * 2 + 3 + 2 + 8) * 6 + (4 + 7)
3 + 6 + (6 + 7 + (4 * 5 + 4 + 5 * 3 * 7)) * 6 * 6
3 + (2 + 4 + 8 * 4 * 6) + ((4 * 7 + 2 + 4 + 3) * 8) * 8 * 9 + 4
4 * 9 + 2 * 9 * (4 * 7 * 9 * 6 + 8) + (6 + 6 + 7 + 6)
(9 * 5 + (7 + 9 * 9 + 5)) * 9 + 5 * 7
(2 + 2 * (3 * 6) * 8) * 5 * (8 + (7 + 6 + 2 + 9 * 9 * 9) * 2 * 4 + 4) + 2
6 * 2 * (6 * (7 + 6) * 4)
8 * 9 + 3 * 8
4 * 2 * 6 + (8 * 5)
9 * 9 + 2
7 * 6 * 4 + 9 * ((8 * 5 + 5) + 8 + 7)
((3 + 2 * 9 + 4 * 6) * 9 + 3 + 4) * 4 * 2
4 * 5 + (6 * 4 * 8 * 5 + 6)
9 + (6 * (5 + 7 + 3 * 2 * 2 + 4) * (8 + 5) * 6 + 2) * 2 + (2 * 7 + 3 * 3 * 7 + (5 * 6 + 2)) * 9
(8 + 8 * 5) + (4 + 8) * 4 * 6 + 8
9 + 9 + 5
((9 * 7 + 4 + 3) * 9 * 5 + 3 + 7) * 2
7 * 4 * (7 * (6 * 7 + 2 * 9) + 5) * 5
((9 * 4 * 6 + 2) + 9 * 6 + 8 * 4 + 7) + 7 * 4 * 3 + 2
6 + 8
5 + 6 * (9 * 9 + 6 * 3 + 3 * 9) * (8 * 9 * 6 + (3 * 8) + 5 + 6) * (5 * 6 * 6 + 2 + 5 * 7) * 9
(6 + (2 + 8 * 6 * 4) * (5 + 2 + 8 + 4 + 3) + (9 + 2) + (6 * 6 + 2 + 3)) + 2
6 + (5 * 3) * (5 * 9 + 9 + (7 + 8 + 2 * 7 * 2) * 5) + (2 * 9 * 8)
3 * (6 * 2 * 4 + (7 * 7) + 4) + (6 + (8 + 3 * 6) * 3 + 3 * 5 * 6) * (4 + 3 + 2 * 7 + 8 * 5) + 3
(2 * (7 + 2 + 6 + 7 + 4) + 3 * 6 * (6 + 6) + 2) * 7
8 * 3 + 5 + (6 + 2 * 5 * 3 * 6)
((5 * 7 + 4 * 8 * 9 + 5) + 6 * 9 * 8 + 4) + (4 * 4 * 2 * 5 * 5) + 6
3 * ((5 + 2 * 7 + 9 * 9) * 3 + 8 * 6 + 2) + 9
(8 + (3 * 9 * 6 * 4) + 8 * 7) * 4 + 7
7 * (2 * 7 + (6 * 8 * 3 * 2 * 7 + 6) + 2 + 7 + 7)
(2 * (3 * 9) * 4 + 5 * 9) + 7 * 3
3 + ((9 + 6 + 7 + 6 + 8 + 6) * 3 * 8 * 2) * (9 * (8 * 8 * 8) * 4 * 7 + 6 * 6)
((6 + 8 + 8 * 2) * (7 * 2 * 7)) * 3 + 4 * (3 + 5 + 3)
3 + 4 * (4 + 2 + 2 * 4) + (6 + (6 + 7 + 5 * 4) + 9 * 2 + 3 * 2) * 7
(3 * 5 + 7 + 2 * 4) * ((8 * 2 + 2) * (8 * 9 + 9)) * 7 + (9 + 3 + 4 * 2 + 5) * (3 + 9 + 4 * 4) * 2
3 * 3 * 3 + ((5 * 5) * 4 * 7 * 5 * 2 * 6) * 4 * 7
2 * (9 * 7 + 2 * 5 * 5) * 7 * (6 * 4 * 4) + 4
(7 * 9 * 2) + 8 * (3 + 4 * (2 + 2 + 6 + 4 + 6) + (9 + 2) * 7 + 4)
9 * (3 + 3 + 2) * 6 + 9
(5 * 3 + 7 * 8) * 3
(7 * 8 * (5 + 5 * 7 * 6)) * 5 + 9 + (7 + (2 + 5 * 9 + 9 * 9) + 5 * 8 + 3) * 9
(3 + (9 * 6 + 5) * 2 + 4 + 9 * (9 + 4 * 9 * 8 + 5)) + 6 + 2 + 6 + 9
9 + (4 + (5 * 2 + 5 + 2 * 9) * 2 + (8 * 6))
4 * (9 * 5) + 6
4 * 9 + 6 + ((2 * 9 + 4 * 4 * 9 + 9) + (4 * 5 + 6 * 6) + 9 * 8 + 9)
8 * 2 + ((2 * 4 + 5 + 2 * 6) * (8 * 8 * 9 * 4) * 5 + 3) + (8 * 4 * (5 + 3 + 6 + 2 + 6) * (2 * 8 + 6 + 2 * 4)) + 3
3 + (8 + 6 * (4 + 7 + 8 * 2 + 9) * 8 + (7 + 3) + 5) + 2 * (9 + (2 + 6)) * 3 + 7
2 + 4 * 2 * (2 + 9 * (4 + 2) + 8 * 2)
4 + 2 + 2 * (9 * 7 + (8 * 8) + 5) + 5 * 2
8 * (9 * 7 * 9 + 6 * 7 + (5 * 9)) * 6 + 2 * 3 * 5
6 + (7 + 6) * 5 * 9
8 + 4
2 + 3 * (4 + 3) + 9 * (3 * 5 * 3)
9 + 4 * 9 + 4 * (2 * 9 + (7 + 9 * 2 + 9))
8 + 2 * 7 * (5 * 7 + 4 + 6 + 4) + (8 * 7 + (7 + 3 + 3 + 7 * 6)) * 2
5 + 6 + (3 + 4 + (8 + 7 + 8 * 8 + 8 + 8) * 9 * 7 * 7)
9 * (4 * 6)
((3 * 4 * 2 + 4 + 5) * (7 * 3 + 6) + 6 * 4 + 4) * (5 + 9 + 6 * 9 * 2 * 5) + 7 + 6 * 4
5 * ((7 * 3 + 7 * 4 * 2) * 3) + 5 * 9
(6 * 9 * 3) + 8 * 7 * 7 * 3
(6 * (2 * 9 + 9 + 5 + 9 * 4) + 6) * 4 + 7 + 7 + 3 * 5
(9 + 6 * 8) * 9
8 * ((7 * 7 * 5 * 2 + 8 + 7) * 2 * 9) * 9
(2 + 6 * 2 * 6) * (3 + 4 * 2 + 9 + 3 + 2) + 4 * 4 + 8
6 + 3 * 6 + (7 + 8 * 9 + 4 + (6 + 6 * 9)) + 8
(4 * (7 * 4 + 7 * 8 * 2) + (3 + 7) + 2) + 5 + (4 * 2)
5 * (8 + 3 * 8 * (4 * 8 * 5 + 3 * 8)) * 3 * 3 + 5 * 3
(6 + 4 * (9 * 9 + 6 + 5 + 2) * (8 * 8 + 5 + 9)) + ((5 + 2 + 4) * 8 + 4 + (6 * 5) + 7) * 8 * 6 * 9 + 8
5 + 9 + 8 + ((6 * 2 + 2) + 4 + 6 * 6 * 9)
5 + 7 * (4 * (7 * 3) + 9 + 6 + 8) + (4 + 3) * 8
2 + 6 + 3 * (3 + 7) + 6 + (3 * 5)
(7 + 2 + 3 * 4 * 8) + (6 * 3 + 5 * 6) * 2 * 7 + 4
5 * 2 * 8 + 6 * ((7 + 7 + 5 * 8 + 6 + 3) * 3 + 7 * 2 + 7 + 4)
(9 * 8) + 5 * (3 * 5 + (8 * 3) + (2 + 7 * 5 + 6 + 8 + 6)) + 8 * 5
3 + 3 + 5
6 * 2 + 7 + (5 + 9 * 5) * 6 * 3
6 + 3 + 5 * 5 + 9
2 + 7 + (4 * 3 * 4 * (7 * 5 + 9 + 2 * 5) * 5 + 8) + 6 + 9
2 + 4 + (9 * 3)
6 * 5 * 8 + 5 * (8 * 9 * 3 * 9) * ((6 * 7 * 7 + 5 * 9 * 9) + 5 * 3 + 9 + 5 + 6)
9 * 7 + (2 * 2 * 2 + 4 + 4 + 2) + 6 + 4 * 6
(4 * (8 * 8 + 7 * 5) + 3 + 9 * (9 * 6 * 8 * 5) + 7) + 8 * 6 + 5 * 7 * (7 + 5)
((5 * 9 * 9 + 4 * 7 + 2) + 8 * 8 + 9 * (2 * 5 + 4 + 9) + 2) + 7 * 3
(4 + 8 * 5 * 7 + 2 * 6) * 7 * (8 + (6 + 9 * 7) + 8 * (6 * 2) * 5 + 8) + 5 + 5 * 4
4 + (4 * (4 + 4 * 3)) * 2
((2 * 4 * 7 * 6) * (5 + 8 + 2 * 4 + 6 * 2) + (3 * 2 + 7 * 5 + 2) + 8 * 9) + 5 * 8 + 6 + 9 * 4
9 + 4 * ((3 + 3 + 8 * 4 * 7 * 6) * (4 + 3 * 9 * 5 + 7 + 5) + (4 + 2) * (7 * 5 + 9)) + 9
((7 + 7 + 7 * 2 * 6) * (9 + 9 + 2 * 5) * 2) * 6
(6 + (8 + 6 * 4)) * 9 * 8 + 6 * 8
9 + 5 + 7 + 2 + 9 + 4
4 * ((4 * 4 + 9) + 8) * 2
3 * ((7 * 8 * 9 + 7) + (2 * 4 + 4 + 9) * 9 + 8)
(7 + 8 * 5 + 6 * 9) * 5 + 2 + 4
7 + 5 * (7 * 6 + (4 + 3 * 5) * 9)
(3 + 4 * 5 + 9 + 9) + 8 + (4 + 8 + 3 * (8 * 4 + 7 * 4 * 4)) + 9
6 * (7 * 4) * 5 + (8 * 9 * 4 * (8 * 2 * 7 + 8 + 2) + 6) + 5 + 5
5 * 2 * 9 * (4 + 4 + (4 + 2) + 7) * 3
2 * 4 + (5 + 8 + 8)
(7 + 7 * 8 + 3 + 3) + (8 + 3 * 4 + 9 * 4 * (7 + 8 + 5)) + 2 * 7 * 2 + 6
6 * 9 + 8 * 8 + ((9 * 4 * 9 * 2 * 7) * 5 * 5 * 8 * 8 + 7) + 9
2 + 3 + 2 * 2 * 7 + (5 + 7 + 4 + 5 * 4)
2 * 6 * 7 * ((4 + 6 + 5 * 4) + 4 + 4 + 5) + 6 + 9
(2 + 9 + 7 * 4 * 4) + ((9 * 5) * 5 * 9 + 7) + 5 + 4 + 3 * 8
(6 + (6 * 7) + 3 + 3 * (6 + 6 + 9 + 8 * 2)) + 3 + 4
5 + 5 * (4 * 8 + 2 + 2 * 8) * (2 * 8 * 6 * 2 + (5 * 2 * 8 + 5 + 3) * 5) * 6
4 + (5 + 3 * 9) * (6 * 8 + 4 * (6 + 4 * 5 * 2))
((7 + 6 + 9 * 6) + 2 + 8 * 8) + (2 * 5 + 7) * 4 * (9 + 7 + 5 + 6) * 8 * 5
9 * (4 + 8 + 4 * 8 + (2 * 7 * 2 * 3)) + 2 * 2 + 2 + 8
7 * 6 + 9 * 6 + 9 + (3 + 3 + (5 + 8 * 6 * 5) * (5 + 6 + 4 + 2) + 3 + 3)
(5 * 3) + 4 * 5 * 8
((7 + 4) + 4) * (9 + 5 * 5 * 5) + ((9 + 3 + 7 * 3) * 4 + 5 * 6 * 9 * 5)
9 * 2 * 5 * 4
6 + 3 * 9 * ((3 + 2) * (7 * 4 * 6 * 7 * 9) * 4 * 6 * 8 * 6)
(7 * 6) + 9 + (5 + (6 * 2 * 3 * 8 * 8 + 4)) * 4
(8 * 5 * (9 * 7 + 8 + 2) * 6 * (5 + 3)) * 4
(2 + 6 + 6 + 7) + ((2 * 2) * 9)
6 * 3 + ((2 * 9 + 4) + (8 * 7 * 8 * 9 * 7 + 7) + 3 + 8 + (2 * 5 + 4 + 2 * 2 * 3)) + 2
(9 + 8 * 6) * 7 * 4 + (2 * 3 + 9) * 4 + 9
5 + 5 + ((5 + 8 * 4 + 6) * 3 + (4 * 6 + 3) + 2 * 9 + 8)
2 + 2 * 5 + (4 * (9 * 5 * 6) + 4 + 6)
(8 + 5 + (8 * 4) + 2) + 7
9 + (8 + 9 * 4 + 7 + (3 * 7) * 8) + (6 + (8 + 9 + 9) * 3) + 7 * 5 * 8
(3 + 9 + 3) + 3 * 2 * (5 + (7 + 4 + 3 + 8) + 7) * 5
((2 * 7 * 2 * 7 + 8 * 3) + (5 * 8 + 7) * 3 + 2 * 9 + 4) + (4 * 9) * 4 * 7 + ((9 + 4 + 4) + 6) * 7
5 * 9 + 4 * 9 + (6 * 6 + 7) * ((8 * 3 * 3 * 8 + 2 + 5) * (8 + 9 + 7 * 4 * 3 + 8) + 3 * 7)
6 * 9 + ((9 * 7 * 8 * 3) * (5 * 5) * (4 * 9) + 4) + 9
(5 + 4) * 9 + 3 * (7 * 2 * 3 + 3 * 3)
(7 + 8 * 8 * (5 + 9 * 4 * 3 * 3) + (3 + 3 * 9 * 2 * 9 + 4) + (8 + 5 + 6 * 9)) * 2 * 8 + (7 * 8) * 4 * 3
6 + 2 * 6
5 * 5 + ((7 + 9) + (9 + 7 * 3 * 6 * 9 + 3)) * 8 + 6 * 3
(3 + 6 * 8 * 7 * 2) + 3 * 5 + 8 * 8
(8 * 4 * 7 * (4 * 5) + 9 + (9 + 6 * 5 * 3 + 9)) + 5 + 9 * 7
8 + (8 + 9) * 5 * (8 + 4 + 3 + 6 + 6 + 8) * 6
7 * 5 * 8 + 8 * 7
7 + 5 + ((7 + 4 * 2 * 3 * 6) * 7 * 9 + 3) * ((5 + 5 * 7 * 6) * 7 + 7 + 3 + 5 * 4) + (5 * 8 * (4 * 4 + 6 * 2 * 4 + 2) + 8 * 7) * 5
(3 * 6 + (3 + 4 + 4 + 9 + 2) + 8 + 8 + 5) + 2 * 9 * 6 + (6 * (5 + 4 + 4) + 4 * 6)
8 * (3 + 9 * (5 * 2 * 7 + 5 * 2 * 4)) + 9 + 6 * 9
(5 * (5 + 6 + 5) + 6 * 7) + 6 + ((9 + 2 * 3 + 7 * 3 + 2) * 9 * 3) + (4 + 4 + (5 + 8 * 9 + 5 + 7 + 9)) + ((2 * 2) + 4 * (9 * 7 + 4 + 9 * 3) + 8 + 3 * 6)
(4 + (9 + 2 + 6 * 4) + 6 + (8 * 9 * 2 * 8 * 2 + 4) * (4 + 5 * 7 + 9 + 4 + 7) + (3 * 2 + 6)) * 4 * 6 + 8 * 4 + 9
(7 + (3 * 3 + 5 + 6 + 2) * 7) + 3 * 6 + (3 * 6 * 4 * 7 + 6 + 7) + 5
(5 + (2 * 4 * 6 + 9 + 3 + 9) * (5 + 3 * 2) * 3 * 8 * 3) * (3 + (3 + 2 + 4 * 5 + 3 * 3) + 9 * 2 * 5 + (2 + 4 * 2 * 6 + 6 + 9)) + (6 + 6 * 7)
(8 + 5 + 8 * 4 + (3 * 5 * 8)) * 7
4 * 8 + 4 + 9 * (6 * (8 + 8 * 5 * 6 * 5) * 8) + (3 * 4)
4 * (2 + 9 * 7 + (2 + 3)) + 6
5 + 9 * (2 + 6 + (3 * 7) * 2 + 5 + (5 + 9 * 2)) * (7 * 6 * 4 + 7 + 9 + 8) + ((5 + 2 * 5 + 2 * 9) * (7 * 6) + (2 * 8 * 8 * 9 * 3 + 4)) * 5
4 * 2 + 2 + 5 * (2 + 5 + 5 * 6 + 9)
3 + 7 * 7 + (3 + 8 * 4 + 8 * 4 + 9) * 3
2 + (7 + 6 * 9 * 7 + 4 + 6)
(4 + 2 * 9 + 3) * 4 * 2 * 7 * 7
5 + 7 + (4 * 9 * 2 * 9 * 4 + 9) + 2 + 5
(2 * 7) + (9 * 7 * 9 * 8) + 4 * 7
4 * (8 * 6 + 2 * (9 * 8) + 5 + 6) + 3
8 + 4 + 8 * 8 * 9 * 4
7 + ((9 + 4 * 6 * 5) * (5 * 3 * 8 * 3 + 4 * 6) + (5 * 8 + 2)) * 9 + 2
7 + 3 * (4 + 3 * 8) + (2 * 8 * 5 + 2 * 2 + 4) + 9 * 8
(5 * (9 * 3) + 5) * 8 * (2 * 3 + (5 * 8 + 2 * 3) + 3) * 5
5 * (8 + 7 * 3) * (4 + 5) * 5 * ((8 * 3 * 9) * 2 * 3 * 6)
3 * 6 * (8 + 8 * 4 + 9) + 6
3 + 3 * (4 + 8) + ((9 * 4) * 6)
(3 + 2 * 2 + 5 + (7 * 4 * 2 * 3 * 3 + 8)) + 7 + (3 * (6 * 6 * 7 * 5) * 8 * 4)
6 + 4 * 4 * (3 + (2 * 2 * 5 * 9 * 8) + 4 + 8 * 4) * 4 * 2
4 * (3 * 4 + 8 * 2) * 8 + (3 + (9 + 9)) * 6 * ((6 + 5 * 5) + 8)
3 + 2 + (9 * (5 + 9) * 5 + 6) + 8 + 6
8 + 8 + 7 * (2 + 7 + 2) * 5
2 * (2 + 8 * 5 + 2 * (6 * 6 * 6)) + 2
5 + 2 * (2 + 2 + 5 + 2) + 9 * ((9 * 8 + 2 + 3 + 8) * 7)
6 + 8 + 6 + 4 * (4 * 4) + ((5 * 3) + 2 + 5 + 3 + 5)
(7 + 8 * 9) * (8 + 2 + 2 * 4 + (2 * 3 + 7 + 3 + 4 * 8) * 5) + 9 + 3
7 * (6 * 9 * 4 * (5 + 4 + 8 + 3) + 5)
2 + 7 * 4 + (7 + (9 + 3) * (2 * 9 * 4 + 4))
3 + 2 * 3 * 8 * (5 + 9 * 5 + 4)
(5 * 4 * 6 * 8) + 2 + 8 * 4
7 + (6 + 6 * 7)
2 * 7 * 6 * (8 + 6 + (8 * 3 + 3 * 4 + 7)) + 4
2 * (5 + 4 + 9) * 9 * 8 * (2 + 9 * 6) * 6
4 * ((2 * 2 + 9 * 3) + (7 + 6 * 7 + 5 + 4)) * 4 * 3
7 * 5 * 6 + 8 * (6 * 8 + 6 * (9 + 7 + 9 + 9 * 7 * 9))
7 * 6 + ((4 * 4 * 3) + 9 * 4)
4 + 6 * 3 + 9 + (6 + 9 * (8 * 3) * 2 * (9 + 8 * 3) + 9) * (8 + 6)
6 + 7 + 8 * 4 + (8 * 6 + 2 * 4 * 8 * 6) * 7
(6 * 5 + 4) + 2 * (3 + 3 * 2) + ((4 + 6) + 7)
8 * 5 * 9 * 3 * 2 * (6 * 8)
4 + 6 + 2 + 5 * 6
2 * 3 * 6 * 6
6 + ((5 + 2 * 3) + (9 + 5)) * 2 + 5
(4 * 9) + 6
8 * 3 * 7 * 9 * 7 * 4
(2 + 9 + 3 * 8) * (2 + 2 + 2 + (2 * 7 * 2) * 3 * 3) * 7 * 6 + (9 + 8 * 6 + (5 * 3 + 2 + 3)) + 9
9 + 6 * ((8 + 7) + (3 * 7 + 5) + (8 + 3 + 4 * 6 * 8) + 8) * 6
4 * (7 * 2 + 2) + (4 * (4 * 4 * 5) + 9 + 2) + 7 * 6
6 + 9 + 4 + (8 * 8 + 2)
(5 + 8 + 9) * 8 * (7 * 9)
6 * (6 * 4 * (7 + 4 * 7) * 4 + (3 * 2 * 5 + 8 * 3)) + 9
(2 * 9 * 4 + 5 + 8) + 4 * 5 * (7 + (6 + 6 * 7 * 2) + (7 * 8 + 7 * 5 * 2 * 3) + 5 + 6 + (6 * 9 + 8 * 2 + 9 + 2)) + 6 + (3 + 3 + (9 * 6 * 6 + 5 + 9 * 2) + 6 * 2)
(5 + 3 * 2) + 6 * 9 + (2 * (8 + 9 + 2) + 4 + 4 * (9 + 4 * 2))
(6 * (2 * 2 + 2) * (2 + 2 * 8 * 4 * 6) * 8 * 7) * 5 * 5 + (8 * 8) * (5 * 9 * 8)
6 * 2 * 8 * ((4 * 2 * 6 + 3) + 6) * 5
(4 * 5 + 5 + 5 * 7 + 4) + (5 + 8 * 5 + 9 + (9 * 7 * 2 * 4 + 5 * 4) + 2) * 4 * 8 + 3
(7 * 5) + ((8 * 7 + 4 * 6 * 4) + 9 + 4 + 7)
2 + (7 * 7) * 5 * 7 + 6 * 6
4 + (5 + 3 + (4 + 5) * 3) + 5 + 2
(3 * 6 * (3 * 5 * 3 * 4 + 6) + 8) * (3 * 2 * 9 * 4 * (2 + 8 * 6 + 4 * 4) + 4) + 5 * 5
7 + (5 * 6 * (6 * 2) * (7 + 4 + 3) + 6 * 7)
(7 * 4 + 6 + 7 + 8 + (2 * 2 * 6 * 4 + 2)) * 2 + 4 * 2
7 * ((5 * 7 * 3 + 2) + (3 * 2 + 9 + 6 + 8 * 2) + 8 + 7 * 7 + 2) * 8 + 7 + ((9 * 8 + 3 + 3 + 9 * 9) + 8 * 2 + 7 * 5) * 7
(7 * 5 * 2 + 7) + 9 * 6
6 * 4 * 4 + (3 * 3 + 7 * 5) * 4 * 9
2 * ((3 * 6 * 4) * 4 * 5 * (5 * 2 + 4 * 2 * 3 + 8) * 4 + 6) * 5 + 8
2 + (5 * 3) * (5 + 6 + 9 + 4 * (9 + 7 + 7)) * 8 + 4 + 2
((2 + 5) * 4 + 2 + 7 * 6) + ((6 + 2) * 2 + 7) + (3 + (3 + 2) * 5 + 8 + (8 * 7) + 3) * 9 * (4 * 7 * 7 + (7 + 5 + 8 + 4 + 4 + 2) + 8) + 5
8 + (6 + 2 + 5 + 2) + 5 * 2 + 4
4 * 2 * ((7 + 8 + 8 * 6 * 5 + 3) * 5 * (6 + 6 * 6) + (5 + 5 + 7) * 8 * 3) * (2 * 5 * 2 * 3) * 7 + 5
8 * (9 + (7 + 8 + 7 * 4 * 4 + 9) + (5 * 7 * 6 * 3) * 6 * 4) + (6 + 8 * (4 + 2 * 8 + 4 * 4) + 8) * (8 * 3 + 3) * 5
((5 + 4 + 3) * 2) + 6 * 3 + (3 + 6 * 4) + 9 + (4 + (8 + 3 * 4 + 2 + 6) * 5 * 2)
4 * ((5 * 6 * 4 + 7) + 6 * 6)
3 + ((5 + 6 * 9) * 5) * ((8 + 5 * 7) + (5 * 3 + 5 + 4) * 7 * 8) * 4 * (3 + 3 * 9 * 4)
8 * 8 * (6 * 7 * 7) * 8
((2 * 4 + 8 * 4) + 6) + ((9 + 2) + 3) + 8
3 + 5 + 6 + 7 * ((3 * 6 + 2) + 9) + 6
9 + 2 * (9 * 9 + 4 * 9)
(8 * 6 * (9 * 2 + 2 + 2) * 4 + 6) + (2 * 8 * 8) + 3 * (7 * 5 + 5) + 3
9 * 9 + (6 + 7 * 6 + 2 + 9 * 7) * (9 + 7) + 6
5 + (8 * 9 * 7 + (3 * 6 + 4 + 9) + 8 * 5) * 8 * (2 + 2 + 7 + (5 * 3 * 2 * 7)) * 3 * 7
2 + 3 + 8 * 4 * 5 + (5 * 9 * 5 * 8)
6 * 6 * ((7 + 5 * 5 * 9 * 3 * 6) * (3 * 7 + 9 * 8 * 8) + 9 * 5 + 7) * 6 * 3
(5 * (5 * 6 * 5 + 5 + 5) * 2 + 8 * 5) * 9
4 + ((9 * 2 * 6 * 2 * 6) * 4 * 6 * 4 * 5 + 9) * (3 + 3 * 8 * 8 * (3 + 5 * 5 * 8)) + (8 * 5 + 7 * 6 + 9) * 9
4 * 9 * (4 + 5 * 7 * 8 + 3) * 2 + 4 * (2 * 6 * (3 + 2 * 7 + 6 + 2) + 5)
((8 * 4 * 9 + 3 * 3 + 2) * 3 * (9 * 7 + 6 + 7 + 3 + 3) * 6 * 2 + 9) + 4 + 5
3 + 9 + 3 + 7
((6 + 9 + 3 + 3 + 4) + 7 * 7) + (3 * (6 * 3 + 6 * 8 + 9) + 8 + (2 * 5 + 7 * 6 * 6 + 7)) * 9 + 2 + 8 * 6
3 + (8 + (2 + 5 + 7 + 7 * 9) + 8)
(4 * 3) * 7 + 6 + 8 + 9 * 3
(4 * 9 * 4 * 9 + 6 * 7) * 7 * 9 + 6 + 9 * 2
(4 * 2 * (9 + 5 * 3 + 8 + 5 * 4) + 6 + (3 * 3 * 2 + 2 * 3)) * 4 + 6 + 3 + 8
9 * 9 + (7 * 8 + 4 * (9 * 8 * 5 + 5 * 3) + 7) * 3
7 * (7 * (5 * 7 * 9 + 8 * 9) + (7 * 8 * 5) + (9 * 2 + 6 + 3 + 3)) * 6 + 6 + 6
8 + 9 + 5 + 6 * ((8 * 7 * 5 * 3 * 9) + (7 + 6 + 7) + 4 * 3 * 8)
2 + (7 * 4 + 6 * 4)
(9 * 8 * 5 + (7 * 6) * 9 + (6 + 8 * 3 + 9)) + 8
2 * 5 * (3 * 4 * 7 * 8) + (9 * 3 + (5 + 8 + 9 * 5 * 9 + 7)) + 3
6 * (8 * (6 + 6) + 9 * 7) + 8 + 7 + 3
(9 * (5 + 2 + 9 * 8 * 4) * 9 + 7) * (2 + 9) + 6
9 + ((2 + 6) + 5 + 8) * 3 + (7 * 2 * (8 + 6 * 2 * 4 * 7) + 8 + 5 * (7 + 4))
8 * 4 * (8 * 7 + 6 + 8 + 9) * 2
4 + 4 * 8 + (2 * 9 * 9 + (5 + 7 + 4) + 7 * (5 + 7 + 7 * 3)) * ((4 + 3 + 5 + 7) * 3 + 7 + 7 + 2) + 3
5 * 9 * 9 + 6 + (9 + 2 + 4 * 5 + 6 * (6 + 3 + 6 * 3))
9 + 3 + 3 * 9 * 4
5 + (4 + 3) + 2 + ((2 * 4 * 6 * 8) * 5) * 5
(5 * (4 + 3 + 7) + 2) + (3 * (6 * 6 * 2)) + 4 + (7 * 7 + 3 + 5 * 6) + (5 * (4 + 4 + 9 * 5 + 7))
(3 + 7 + 5) + ((6 * 8 + 7 * 4) + 8 + 6 + 7 * 2 + 8)
(3 + 7 + 3) * 4 * 6 + 2 * (4 + 7 * 3 + 3) + 7
(2 * 7) + 6 * 9 + 5 * ((3 + 9 * 5 + 5 * 2) * 3 * 9) + 6
((9 + 2 * 3 + 7) + 9 + 6) * 8 * 6 * 4 + ((4 + 9 + 2 * 6 * 9 + 2) * 9 + 9 * (4 + 3 * 9 + 3) + 7 * 3)
2 * 3 + 4 + 7 * 6 * (9 * 5 + 9)
9 + 3 * (8 * 8 + 4 * (8 * 8 + 6 + 3)) * 6 + 2
6 * 7 * (9 * 7) + 9 * 5
4 + 8 + (5 * (9 + 8 + 3 + 5 + 9) * 6 * 9 * 5 * 8) + 2 * ((8 + 2 + 3 + 8) + 3 * (8 * 4 + 4 * 2)) + 7
(3 * 8) * 7 * 2 + 9 * 2
4 * (8 * (4 * 3 * 2 + 6 * 4) * 3 * 5 + 6) + 6
(2 + 8 + 9 * 4) + 2 + 9 + 7 + (6 + 4 + 6 + 6)
5 * 6 * (5 * 6 + (7 * 9 + 5 + 6 * 7 * 5) + 9) * 8 * (9 * 8) + 7
(5 * 6 * 7 + 4 + 9 + 2) * 3 * 4 * 3 + (2 + (4 + 6 + 2 * 3) + 4)
(5 + 3 * 8 + (7 + 6)) + 3 * 7 + 7
8 + 5 * (3 + (5 * 6 * 5) + 6 + 2 * 7 + (9 * 4 + 3)) + 6
2 + (3 * 3 + (4 * 6) * 4 + 5) + (4 + 4) * (8 + 2 + (7 + 6 * 4 * 9 * 7)) + 6 + ((8 + 3) + 7 + 5 + 3)
(9 * 2) * (3 + 8 + 3 * 4) + 4 * 3 + 7 * 8
4 * 3 * 5
((5 + 2 * 5 * 9) * 7 * 3 * 9 + (8 * 5 * 3 * 9 + 7 + 3)) * (9 * 9 + 6)
(9 + (5 * 3 * 4) * 2 + 3 + 5 + 2) + 4 * 5 * 5
2 * 6 * 4 * ((3 * 7 * 4 + 8 * 8) * 4 + 5) + ((6 + 4 * 2 + 9 * 3) + (7 * 7 + 7) * 2 + 7 + 3)
2 + 9 + 6 * (2 * 5 + 9 + 9 * (5 + 8 + 2 * 3) + 5)
(9 + 9 * 9 + 3 * (7 * 2 * 5 + 8)) + 9
8 + 7 * 8 + ((4 * 3 * 4 * 9 + 5 + 6) * (3 * 2))
4 + 3 * (8 * 3) + 6 + (9 + 3 * 3) + (3 * 8)
2 + 3 + 8 * (8 + (4 + 9)) * ((5 + 7 + 9 * 4 + 6) * 2)
6 + 4 + 8 * (4 * 6 + 3) * (8 * 9) + 3
(3 + 5 + 8 * 5) + 7 * (6 + 8 + (7 * 6 + 9 + 5 + 2 * 2) + 2 * 2 * 2) + 6 + ((3 + 4 + 6 * 6 * 3 * 6) + 3 * 3) + 6
7 + 8 * 9 * 6 + 7 + 3
(5 * 7 * 5 * 5 + (3 * 3)) + 9 + 8 * (2 + (6 * 9) * (9 * 6 * 4 * 9) + (9 * 5)) + 4
(4 + (7 * 8 * 4 * 6 * 7 + 6) + 7 * 6) + 4 + 2 + 7 * 4
4 * (5 + 4 + (9 * 4 * 7) + 4 + 2 + (2 + 9)) + (3 + (2 + 3 + 5 + 9 + 4 + 9) * (2 + 7 * 3) * 5) + 8
5 + (5 + (9 + 8 * 9 + 9 + 4) * 6 * 5)
7 * ((7 + 9 * 6 + 9 + 7) + (9 + 3 * 9 * 8 * 4 * 6) * 6 * 9) * 9 * 5
(4 * 5 * 6) * 6 * 6 * (5 + 5 + (2 * 3 * 4)) * 5
9 * (5 + 3 * 9 * (6 * 5 + 9) + 3 + 9) + 6 + ((8 + 8 * 5) * 7 + 4 * 5 + 8 * (8 * 3 * 5)) * 5 * 8
4 + ((7 * 2 * 7 + 2) + 9 * 2 * 4) * (7 + (3 + 9 * 9) + (6 * 5) + (9 + 9 + 5 + 3 + 3)) * 8
(3 + 9 * 8 + 2 * 9 + 9) * 8 * 6
9 * 8
9 * (8 * 4 * 5 + 3 * (9 * 2 * 7 * 6)) * 6 + 4 * 3
9 + 3 * 9 * 4 * (9 * 3 + 3 + 2 * 6) + 9
((4 * 3 + 2 + 7) * 3 * 8 + 2) + 5 * 9
8 + 5 * 9 + (3 + 8 * 4 + 8 * 8) * 5
(6 + 4 * (2 + 9 + 6 + 3 + 9 * 6) + 6) + 2
7 * 6 + ((2 * 6 * 6 * 7) * 2 + (8 * 3 * 2 + 8) * 5 + 6) * 7 * 5
(6 * 6 * 3 * 5 * 6) + 2 + (4 * 6) + 7 + (9 + 6 * 2 * (5 + 9 * 9 + 7 * 5)) * (6 * 3 * 9 + 8)
9 + (2 * (8 + 8 * 7) + 2 * 9 + (6 + 5 + 4 * 2 + 6)) * ((5 * 5 * 2 + 5) + 2 + (7 * 5) + 4 * 2) + 3 + 2
6 * ((6 * 3 + 4 * 4 + 8 + 9) * 9 + 2 * 9 * 4) + 7
2 * 2 * (8 + 6 + 2 * 5 * (5 + 3 * 6 + 3) + 7) + 5 + 9 * 4
(2 + 9 * 2 * 5) + 5 * 6 * 7 + 6 * (8 * 5 * 4 * 2)
8 * ((9 + 6 + 4) * 8 + 9 + 3) + 2
(2 + 2 + 9 + 9) + ((4 * 2 + 7) * 8 * 3 * 9 + 2 + 5) + (6 * 9 * (7 + 8 * 5 + 4 * 8 * 3) * (6 + 5 + 5 * 5 + 6 * 7)) * 5 * 6
6 * 5
4 * ((9 * 7 * 7 + 8 + 5) + 9 * 4 * 4 * 4) * 4 + 7 + 4
7 + (4 * 2 + 6 * 8) * 7 * 6 + 5 + 9
8 + 6 * 4 * (5 * 5) + 7 * ((5 * 8 * 6 * 9 + 6) + 9)
(4 + 9) + 6 + (6 + 4) * (3 + 6 * (8 + 4 * 8 * 2) + 9) * 5
6 * (6 + (7 * 9 * 9 * 2) * 3 * 7) + 7 * 8
4 * (9 + 4 + 9 * 7 * 6) + 4
7 + 3 * (2 * 5 * 4 * 6 + (4 * 3)) + 5 * 5
6 * 5 + 8 * 2 + 5
6 + 2 * (6 * 3 + (2 * 5) + 7 + 7) + (9 + (4 + 3) + (4 + 6 + 7 + 9 * 5) + 3)
((5 + 9 * 4) + 8 * 2 * 5) * 3 + 2 * 8 + (5 * (9 + 3 * 6 + 4 * 2) + 5 * 5) + 5
5 * (6 * 7 * 2 * 4 + 8 * 3) * 9 + 8
(8 + (6 * 3 + 8 * 4)) + (9 + 3 + 7 + 7 * 8 * 4) + (4 * (2 + 8) * 8 * 2 * 9 * 6) + 5
3 + (8 + 4 * 2) * 6
((9 * 2 * 8) * 4) * 4 + 6
((3 * 9) * 5 * 2 * 5 * 3) + ((4 + 4 + 2 + 8) * 3 + (5 + 7) * 6 * 2 + (8 + 6)) + ((9 * 5 * 3 + 3) + (7 * 8 * 4 * 8 * 3) * 7 + 9) + 4 + 4 * 8
2 + 5 + 2 * 3 + 8 + ((2 + 3 * 8) * 4)
9 * (6 + 8 + 5) * 6 + 9 * 2
7 + (6 * 9 + (7 * 4 + 7 + 5 + 7 + 3) * 5 + 7)
9 + 5 * (4 * 6 * 7 + 5 + 4 + 6) * (2 * 8 * 4 + 4 + (2 * 5 * 6) + (9 * 6 * 4 + 9)) + 4 + 6`;

const ex1 = `2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2`


let opcodes = {
  '+': (x: number, y: number) => x + y,
  '*': (x: number, y: number) => x * y
}

let getopcode: (str:string) => Function = function(s) {
    if (s == '+')
        return opcodes['+']
    else 
        return opcodes['*']
}

let calculate: (line:string) => number = function(l) {
    return reccalculate(l.split(' '), [], [], 0)
}

let reccalculate: (terms:string[], current_res: number[], op:string[], stacklevel: number) => number = function(ts,c,o, sl) {
    if (ts.length < 1)
        if (sl < 1)
            return c[sl]; // end of line parse
        else {  // apply op
            //console.log(c[sl-1] + " " + o[sl-1] + " " + c[sl])
            c[sl-1] = getopcode(o[sl-1])(c[sl-1],c[sl])
            return reccalculate([], c, o, sl-1)
        }
    else {
        const t = ts[0]
        if (t == '+' || t == '*') {
            o[sl] = t
            return reccalculate(ts.slice(1), c, o, sl) // save the operation to apply
        } else { // got a number, apply to current_res
            const ft = t[0]
            if (ft == '(') 
                return reccalculate([t.slice(1)].concat(ts.slice(1)), c, o, sl+1)
            else if (ft == ')') {                                
                if (o[sl-1] == undefined &&  c[sl-1] == undefined) {// first expression - no op to apply, juste unstack
                    c[sl-1] = c[sl]
                    delete c[sl]
                }
                else {  // apply op
                    //console.log(c[sl-1] + " " + o[sl-1] + " " + c[sl])
                    c[sl-1] = getopcode(o[sl-1])(c[sl-1],c[sl])
                    delete c[sl]
                }
                delete o[sl-1] // reset op index so we know for the number case
                if (t.length>1)
                    return reccalculate([t.slice(1)].concat(ts.slice(1)), c, o, sl-1)
                else // no more term
                    return reccalculate(ts.slice(1), c, o, sl-1)
            } else { // its a number (with maybe closingparenthesis)
                const terms = t.split('\)')
                if (o[sl] == undefined) // first number of expr
                    c[sl] = parseInt(terms[0],10)
                else { // second number
                    //console.log(c[sl] + " " + o[sl] + " " + terms[0])
                    c[sl] = getopcode(o[sl])(c[sl],parseInt(terms[0],10))
                    delete o[sl] // reset op index so we know for the number case
                }
                if (t.length>terms[0].length) { // there are some parenthesis
                    return reccalculate([t.slice(terms[0].length)].concat(ts.slice(1)), c, o, sl)
                }
                else // no more term
                    return reccalculate(ts.slice(1), c, o, sl)
            }
        }
    }
}

let solution1: (multiline_input:string) => number = function(str){
    const resultmap = str.split('\n').map(calculate)
    console.log(resultmap)
    return resultmap.reduce((acc, curr) => acc + curr)
}

//console.log(calculate("(2 + 6 + 6 + 7) + ((2 * 2) * 9)"))
//console.log(calculate("1 + (2 * 3) + (4 * (5 + 6))"))
//console.log(calculate("3 + (6 * 9 * (4 * 4) * (7 + 2 + 9 * 3 + 5 + 8)) + (3 * (6 + 7 * 4 + 9 * 8) + 3 * 5 + 9 * (5 + 9))"))
//console.log(solution1(input))

// solution2, restart from scratch because solution1 is very very very ugly
const where_to_add_opening_par = (all: string[], index:number) : number => {
    var nb_clpar = 0
    var i = index
    do {
        i--
        nb_clpar += (all[i].match(/\)/g)||[]).length - (all[i].match(/\(/g)||[]).length
    }  
    while (nb_clpar > 0);
    return i
} 

const where_to_add_closing_par = (all: string[], index:number) : number => {
    var nb_clpar = 0
    var i = index
    do {
        i++        
        nb_clpar += (all[i].match(/\(/g)||[]).length - (all[i].match(/\)/g)||[]).length
    }  
    while (nb_clpar > 0);
    return i
} 

const calculate2 = (str:string) : number => {
    var exprs = str.split(' ')
    exprs.forEach((value, index) => {
        if (value == '+') {
            const op_index = where_to_add_opening_par(exprs, index)
            const cl_index = where_to_add_closing_par(exprs, index)
            exprs[cl_index] += ')'
            exprs[op_index] = '(' + exprs[op_index]
        }
    });
    //console.log(exprs.join("") + " = "+eval(exprs.join("")))
    return eval(exprs.join(""));
}

const solution2 = (str:string) : number => {
    //console.log(str)
    const resultmap = str.split('\n').map(calculate2)
    //console.log(resultmap)
    return resultmap.reduce((acc, curr) => acc + curr)
}

//console.log(calculate2("1 + 2 * 3 + 4 * 5 + 6 "))
//console.log(calculate2("2 * 3 + (4 * 5)"))
//console.log(calculate2("5 + (8 * 3 + 9 + 3 * 4 * 3)"))
//console.log(calculate2("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))"))
//console.log(calculate2("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"))

//console.log(solution2(input))
